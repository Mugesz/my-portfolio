@import "../../vars.css";

.container {
  display: flex;
  flex-direction: column;
  border-radius: 10px;
  background: linear-gradient(180deg, #576cbc 0%, #132a53 100%);
  box-shadow: 0 16px 14px 0 #04152d;
  padding: 18px 24px;
  max-width: 345px;
  height: 100%;
}

.image {
  margin-bottom: 26px;
}

.title {
  font-size: 25px;
  font-weight: 700;
}

.description {
  margin-top: 6px;
  font-size: 25px;
  font-weight: 400;
}

.skills {
  width: 100%;
  margin-top: 14px;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  gap: 6px;
  list-style: none;
}

.skill {
  font-size: 25px;
  font-weight: 400;
  border-radius: 100px;
  background: var(--color-dark);
  padding: 2px 22px;
}

.links {
  width: 100%;
  margin-top: 26px;
  display: flex;
  justify-content: space-around;
}

.link {
  text-decoration: none;
  color: var(--color-text);
  font-size: 30px;
  font-weight: 600;
  border-radius: 100px;
  background: var(--color-primary);
  padding: 1px 22px;
}



/* 
<!-- jQuery (Ensure it's loaded before this script) -->
<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.2/jquery.min.js"></script>

<script>
document.addEventListener("DOMContentLoaded", function () {
    function animateCounter(counter) {
        let target = parseInt($(counter).text());
        $(counter).prop("Counter", 0).animate(
            { Counter: target },
            {
                duration: 1500,
                easing: "swing",
                step: function (now) {
                    $(counter).text(Math.ceil(now));
                }
            }
        );
    }

    let counters = document.querySelectorAll(".counter");
    let observer = new IntersectionObserver(
        (entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting && !$(entry.target).hasClass("animated")) {
                    $(entry.target).addClass("animated");
                    animateCounter(entry.target);
                    observer.unobserve(entry.target);
                }
            });
        },
        { threshold: 0.5 } // Trigger when at least 50% of the element is visible
    );

    counters.forEach(counter => observer.observe(counter));
});
</script> */

